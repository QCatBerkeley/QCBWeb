<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- Favicon -->
        <link rel="icon" type="image/png" href="images/icon_black.png">
        <!-- Tab name -->
        <title>Articles | QC@B</title>
        <!-- Bootstrap core CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
        <!-- Social link CSS -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        <!-- Custom styles -->
        <link href="CSS/decal.css" rel="stylesheet">
        <link href="CSS/common.css" rel="stylesheet">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!-- Bootstrap core JavaScript -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/holder/2.9.4/holder.min.js"></script>
        <!-- ENABLES TOOLTIP -->
        <script>
        $(document).ready(function() {
        $('[data-toggle="tooltip"]').tooltip();
        });
        </script>
        <meta charset="UTF-8">
    </head>
    <body>
        
        <div id="fb-root"></div>
        <script>
        (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s);
        js.id = id;
        js.src = 'https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v3.1';
        fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));
        </script>
        <main role="main">
            <!-- Parallax Image -->
            <div class="bgimg-2">
                <!-- NAVBAR -->
                <nav class="navbar navbar-toggleable-md navbar-light bg-faded">
                    <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                    </button>
                    <a class="navbar-brand navbar-left" href="index.html">
                        <img class = "logo" src="images/logo.png">
                    </a>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ml-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="index.html">Home</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="team.html">Team</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="project.html">Projects</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="decal.html">Decal</a>
                            </li>
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Articles</a>
                                <div class="dropdown-menu">
                                    <a class="nav-link" style="color: #5a5a5a;" href="article1.html">What is Quantum Computing?</a>
                                    <a class="nav-link" style="color: #5a5a5a;" href="article2.html">Quantum Complexity</a>
                                </div>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="https://bit.ly/2G4GBLF">Join Us</a>
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>
            <div class="container marketing">
                <div class="row featurette">
                    <div class="col-md-9">
                        <h2 class="featurette-heading" style='margin-top:0px;'>Quantum Complexity</h2>
                    </div>
                    <div class="col-md-3">
                        <p class="lead" style='margin:0rem; margin-top: 0.75rem;'>
                            February 4, 2019
                        </p>
                    </div>
                </div>
                <hr class="featurette-divider" style='margin-top:0rem; margin-bottom:2rem;'>
                <div class="row featurette" style="padding-bottom: 20px">
                    <div class="col-md-12">
                        <p class="lead">
                            Before we may undergo an analysis of quantum complexity theory, it is useful to first discuss classical complexity theory. Algorithms provide precise instructions for how to solve computable problems– they are the fundamental concept of computer science. The model that we will use to study al- gorithms, and hence computation, is called a Turing Machine: it is rather similar to an everyday personal computer, but rather than being a physical object, it is an abstract notion.
                            <br>
                        </p>
                        <p class="lead" style="margin-left: 40px">
                            <b>Definition. </b>A Turing Machine consists of four elements:
                            <ol style="margin-left: 60px">
                                <li>A <i>program</i> — in the same sense as an ordinary computer.</li>
                                <li>A finite-state control— acts as a processor.</li>
                                <li>A tape— acts as memory.</li>
                                <li>A read-write tape head— points to the position on the tape that is currently readable or writable.</li>
                            </ol>
                        </p>
                        
                        <p class="lead">
                            The formal definition of a Turing machine is slightly more subtle than the one given here, but this definition will be sufficient for our needs.
                        </p>
                        <p class="lead" style="margin-left: 40px">
                            <b>Thesis.</b> <i>Church-Turing</i>: A Turing Machine consists of four elements:
                            <br>
                            The class of functions computable by a Turing machine corresponds exactly to the class of
                            functions which we would normally regard as being computable by an algorithm.
                            <br>
                        </p>
                        <p class="lead">
                            By choosing that particular definition for an abstract model of a computer, Alan Turing completely captured the idea of computability. This revelation was a tipping point that ultimately led to the development of computer science as an active field of research.
                            Quantum computers also obey the Church-Turing Thesis: they may only compute problems that are computable on a Turing machine. Their advantage lies in efficiency, which we will soon discuss in detail. <br>
                            <br>
                            To discuss computational complexity, it is also imperative to introduce the idea of asymptotic behavior. The key idea is that as the input n to a function f(n) grows in size, slowly growing terms inside f(n) become negligible. In addition, constant factors become irrelevant (due in part to the fact that computers have doubled in speed every two years). Big-O notation is used to denote upper bounds on the behavior of a function: f(n) = O(g(n)) if there exists an input n0 such that for all n > n0 there exists a c such that f(n) ≤ cg(n). A concrete example: n<sup>2</sup> + n + 2 = O(n<sup>2</sup>) since for n ≥ 2, n<sup>2</sup> + n + 2 ≤ 2n<sup>2</sup>. Conversely, big-Ω notation is used to denote lower bounds: f(n) = Ω(g(n)) if there exists an input n0 such that for all n > n0 there exists a c such that f(n) ≥ cg(n). For example, 10<sup>n</sup> = Ω(9<sup>n</sup>) since for n > 0, 9<sup>n</sup> ≤ 10<sup>n</sup>. Since f(n) = Ω(g(n)) and f(n) = O(g(n)) are not mutually exclusive (equality is allowed in both cases) if both hold, we say f(n) = Θ(g(n)). The prior example given for big-O notation can also serve as an example for this case: n<sup>2</sup> + n + 2 = Θ(n<sup>2</sup>). <br>
                            <br>
                            Computational complexity is a tricky subject. Different machines don’t necessarily require the same resources to solve certain algorithms, and hence defining the resources required for a given algo- rithm is not a straightforward task. To get around this difficulty, computer scientists classify problems based on whether or not they can be solved using resources bounded by any polynomial in the input n. More succinctly, if the resources required for solving a particular algorithm scale as a polynomial with the size of the input n, then a problem is said to be polynomial. Generally, problems whose resource requirements scale faster than any polynomial in n are considered exponential. Polynomial problems are considered computationally feasible; exponential problems are not. The primary reason for this particular choice of classification lies in the Strong Church-Turing thesis:
                        </p>
                        <p class="lead" style="margin-left: 40px">
                            <b>Thesis.</b> <i>Strong Church-Turing</i>:
                            <br>
                            Any model of computation can be simulated on a probabilistic Turing machine with at most a polynomial increase in the number of elementary operations required.
                            <br>
                        </p>
                        <p class="lead">
                            This effectively means that if a problem is polynomial in some model of computation, it is also polynomial for a probabilistic Turing machine. Hence using our classification schema we can limit our attention to the probabilistic Turing machine model of computation— this makes our job a whole lot easier, since we now have a formal model for classifying the resource requirements of any algorithm (the ”any” being due to the Church Turing thesis).
                            <br><br>
                            Quantum computing is an important new paradigm precisely because it casts into doubt the veracity of the strong Church-Turing thesis– certain problems that are exponential on a probabilistic Turing machine become polynomial (or even constant) given the correct choice of quantum algorithm. In fact, the computational power of quantum computers in general can be tied to some major open problems in classical complexity theory. Until these problems are solved, it’s impossible to precisely define the computational power of a quantum computer.
                            <br><br>
                            Decision problems are problems that have a yes or no answer. Most computational problems can be reduced into a decision problem, allowing a clean analysis of said problem’s complexity— for example, the common question of whether a number is prime or not is a decision problem, which is solvable in exponential time. Another useful definition is that of a language:
                        </p>
                        <p class="lead" style="margin-left: 40px">
                            <b>Definition.</b> <i>Language</i>:
                            <br>
                            A language L over the alphabet Σ is a subset of the set of all possible strings of symbols from
                            Σ.
                            <br>
                        </p>
                        <p class="lead">
                            For example, if Σ = {0, 1} then the set L = {1, 11, 111, 1111...} is a language over Σ. We now have
                            enough background to finally introduce the most important complexity class in computer science:
                        </p>
                        <p class="lead" style="margin-left: 40px">
                            <b>Definition.</b> <i>Polynomial time (P)</i>:
                            <br>
                            A decision problem (whether x ∈ L) is solvable in polynomial time if there exists a turing machine M such that M decides whether or not an input x is in L in time O(n<sup>k</sup>), where n is the length of x.
                            <br>
                        </p>
                        <p class="lead">
                            Let’s break this down a little. Any decision problem can be reduced to determining whether or not an input x is in the language L (simply set L to be the set containing all solutions to the original problem). If such a problem can be solved on a deterministic Turing machine in O(n<sup>k</sup>) time for some k, then that problem is in P. P is a complexity class— complexity classes are sets of languages, where each language in the complexity class is a set containing all solutions to some problem in that complexity class. In a diagram:
                        </p>
                        <p class="lead" style="margin-left: 40px">
                            Complexity Class ∋ Language pertaining to a single problem ∋ Solution to problem
                        </p>
                        <p class="lead">
                            Another common complexity class is nondeterministic polynomial time:
                        </p>
                        <p class="lead" style="margin-left: 40px">
                            <b>Definition.</b> <i>Nondeterministic polynomial time (NP)</i>:
                            <br>
                            A decision problem (whether x ∈ L) is solvable in nondeterministic polynomial time if there exists a turing machine M and two polynomials p and q such that
                            <ol style="margin-left: 60px">
                                <li>If x &isin; L then there exists a ”witness” string y such that M returns yes in time equal to O(p(|x|) when the machine is started in the state x-blank-y.</li>
                                <li>If x &notin; L then for all strings w that attempt to play the role of a witness M returns no in time equal to O(q(|x|)) when the machine is started in the state x-blank-w.</li>
                            </ol>
                        </p>
                        <p class="lead">
                            Put slightly more simply, if a problem admits an algorithm that checks whether or not an input is a solution in polynomial time, but doesn’t necessarily provide a method of finding a solution, that problem is said to be in NP. Clearly, P ⊂ NP. An extremely famous open problem in computer science is whether or not P = NP. Most computer scientists expect that the equality doesn’t hold, since there are problems in NP which seem very difficult to solve, but no formal proof has been discovered as of yet.
                        </p>
                        <p class="lead" style="margin-left: 40px">
                            <b>Definition.</b> <i>Bounded-error quantum polynomial time (BQP)</i>:
                            <br>
                            A decision problem (whether x &isin; L) is solvable in BQP if there exists a family of quantum
                            circuits such that for each circuit Q<sub>n</sub> in the family,
                            <ol style="margin-left: 60px">
                                <li>Q<sub>n</sub> takes as input n qubits</li>
                                <li>&forall; x &isin; L, Pr( Q<sub>|x|</sub>(x) = 1 ) ≥ &frac23;</li>
                                <li>&forall; x &notin; L, Pr( Q<sub>|x|</sub>(x) = 0 ) ≥ &frac23;</li>
                            </ol>
                        </p>
                        <p class="lead">
                            Essentially, BQP is the class of all problems solvable in polynomial time on a quantum computer. It is known that P ⊂ BQP, meaning that any efficient algorithm on a classical computer is also efficient on a quantum computer. The relation between BQP and NP is currently unknown; it is suspected that BQP contains problems in NP that have no known polynomial time solution on a classical computer. This suspicion in turn is what makes quantum computing very exciting, since it may be able to solve efficiently those problems which are classically extremely hard.
                        </p>
                    </div>
                </div>
                <div class="fb-comments" data-href="https://qcb.berkeley.edu/article1.html" data-width="800" data-numposts="5"></div>
            </div>
        </main>
        <!-- FOOTER -->
        <!--#include file="footer.shtml" -->
    </body>
</html>